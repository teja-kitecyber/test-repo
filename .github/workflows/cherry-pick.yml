name: Cherry-Pick Squashed Commit to Target Branches

on:
  pull_request:
    types: [closed]
    branches:
      - dev
      - cloud

jobs:
  cherry_pick_squashed_commit:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history to allow cherry-picking

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Extract PR description
        id: extract_description
        run: echo "${{ github.event.pull_request.body }}" | tee pr_description.txt

      - name: Parse selected branches
        id: parse_branches
        run: |
          # Extract checked branches from the PR description
          branches=($(sed -n '/## 🌍 Target Branches/,/##/ s/- \[x\] \(.*\)/\1/p' pr_description.txt))
          
          # Ensure that all branches are captured and output them correctly
          echo "Branches found:"
          echo "$branches"
      
          # Convert the output to a comma-separated list for GITHUB_ENV
          branches_array=$(echo "$branches" | tr '\n' ',' | sed 's/,$//')
      
          # Print extracted branches for debugging
          echo "Extracted branches: $branches_array"
          
          # Save the branches in GITHUB_ENV for later steps
          echo "branches=[$branches_array]" >> $GITHUB_ENV

      - name: Display the branches
        run: |
          echo "Selected branches: ${{ env.branches }}"
          
      - name: Get the Squashed Commit SHA
        id: get_commit_sha
        run: |
          # Get the SHA of the merge commit (this will be the squashed commit)
          SQUASHED_COMMIT_SHA=$(jq -r '.pull_request.merge_commit_sha' < $GITHUB_EVENT_PATH)
          echo "SQUASHED_COMMIT_SHA=${SQUASHED_COMMIT_SHA}" >> $GITHUB_ENV

      - name: Cherry-Pick Squashed Commit to Target Branches
        run: |
          branches=("dev" "stage" "prod")
          for branch in "${branches[@]}"; do
            # Fetch and checkout the target branch
            git fetch origin $branch
            git checkout $branch
            
          # Cherry-pick the squashed commit to the target branch
                git cherry-pick $SQUASHED_COMMIT_SHA || true  # Prevent failure on conflicts
                
                # Handle potential conflicts or empty commits
                if [ "$(git status --porcelain)" ]; then
                  if git status | grep -q "use 'git cherry-pick --continue'"; then
                    # Conflicts resolved, continue cherry-picking
                    git cherry-pick --continue
                  elif git status | grep -q "use 'git cherry-pick --skip'"; then
                    # Cherry-pick resulted in an empty commit, skip it
                    git cherry-pick --skip
                  fi
                fi
                
                # Push the cherry-picked commit to the target branch
                git push origin $branch
          done
