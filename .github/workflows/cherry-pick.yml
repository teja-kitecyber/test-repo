name: Cherry-Pick Squashed Commit to Target Branches

on:
  pull_request:
    types: [closed]
    branches:
      - dev

jobs:
  cherry_pick_squashed_commit:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history to allow cherry-picking

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install jq (for JSON parsing)
        run: sudo apt-get install jq

      - name: Fetch PR description
        id: fetch_pr_body
        run: |
          pr_body=$(gh pr view ${{ github.event.pull_request.number }} --json body --jq '.body')
          echo "PR Body: $pr_body"
          echo "::set-output name=pr_body::$pr_body"

      - name: Extract target branches
        id: extract_branches
        run: |
          # Extract lines with selected branches from PR description
          selected_branches=$(echo "${{ steps.fetch_pr_body.outputs.pr_body }}" | grep -oP '(?<=- \[x\] ).*')
          branches_array=()
          
          # Iterate over each selected branch and store in an array
          while read -r branch; do
            branches_array+=("$branch")
          done <<< "$selected_branches"

          # Print out the array for verification
          echo "Selected branches: ${branches_array[@]}"
          
          # Convert the array to a comma-separated string
          branches_string=$(IFS=, ; echo "${branches_array[*]}")
          
          echo "::set-output name=branches_array::$branches_string"

      - name: Use branches array
        run: |
          echo "Branches to publish changes: ${{ steps.extract_branches.outputs.branches_array }}"

      - name: Parse PR Description for Target Branches
        id: parse_branches
        run: |
          TARGET_BRANCHES=$(echo "${{ github.event.pull_request.body }}" | grep -oP '(?<=- \[x\] `)[^`]+')
          echo "TARGET_BRANCHES=${TARGET_BRANCHES}" >> $GITHUB_ENV

      - name: Get the Squashed Commit SHA
        id: get_commit_sha
        run: |
          # Get the SHA of the merge commit (this will be the squashed commit)
          SQUASHED_COMMIT_SHA=$(jq -r '.pull_request.merge_commit_sha' < $GITHUB_EVENT_PATH)
          echo "SQUASHED_COMMIT_SHA=${SQUASHED_COMMIT_SHA}" >> $GITHUB_ENV

      - name: Cherry-Pick Squashed Commit to Target Branches
        run: |
          for branch in $TARGET_BRANCHES; do
            # Fetch and checkout the target branch
            git fetch origin $branch
            git checkout $branch
            
            # Cherry-pick the squashed commit to the target branch
            git cherry-pick $SQUASHED_COMMIT_SHA

            # Push the cherry-picked commit to the target branch
            git push origin $branch
          done
